@using Valour.Shared
@inject HttpClient Http
@inject NavigationManager navManager
@inject LocalStorageService storage
@inject AutoMapper.IMapper mapper
@inject IJSRuntime JS

@if (ClientUserManager.Http == null)
{
    ClientUserManager.Http = Http;
}

@if (triedInitialLogin)
{

    <Router AppAssembly="@typeof(Program).Assembly">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
}
else
{
    <Loading></Loading>
}

@if (!hideUpdate)
{
<div class="update-footer">
    <p class="update-text">There is a new version of Valour available! Refresh to blast into new features! 🚀🚀🚀</p>
    <p style="display: inline-block" class="update-text">Current version:&nbsp;</p>
    <p style="color:red; display:inline-block" class="update-text">@GetType().Assembly.GetName().Version.ToString()</p>
    <p style="display: inline-block" class="update-text">&nbsp;|&nbsp;</p>
    <p style="display: inline-block" class="update-text">New version:&nbsp;</p>
    <p style="color:lawngreen; display:inline-block" class="update-text">@newVersion</p>

    <a class="btn-update" @onclick="(() => { hideUpdate = true; StateHasChanged(); })">Ok</a>
</div>
}


@code{

    string newVersion = "(Pinging server)";

    bool triedInitialLogin;

    bool hideUpdate = true;

    // Runs when page is initialized
    protected override async Task OnInitializedAsync()
    {
        // Attempt to re-login the user from local token
        TaskResult tokenResult = await ClientUserManager.TryInitializeWithLocalToken(storage, mapper);

        Console.WriteLine(tokenResult.Message);

        triedInitialLogin = true;

        await JS.InvokeAsync<object>(
          "blazorFuncs.registerClient",
          DotNetObjectReference.Create(this)
        );

        await JS.InvokeVoidAsync("SetVapidKey", VapidConfig.PublicKey);
        await JS.InvokeVoidAsync("enableNotifications");
    }

    [JSInvokable("NotifyPushSub")]
    public static async Task NotifyPushSub(string endpoint, string key, string auth)
    {
        Console.WriteLine(endpoint);
        Console.WriteLine(key);
        Console.WriteLine(auth);

        Valour.Shared.Notifications.NotificationSubscription not = new Valour.Shared.Notifications.NotificationSubscription()
        {
            Endpoint = endpoint,
            Auth = auth,
            Not_Key = key,
            User_Id = ClientUserManager.User.Id
        };

        // Send subscription information to server
        var response = await ClientUserManager.Http.PostAsJsonAsync<Valour.Shared.Notifications.NotificationSubscription>($"Notification/SubmitSubscription?token={ClientUserManager.UserSecretToken}", not);

        TaskResult result = JsonConvert.DeserializeObject<TaskResult>(await response.Content.ReadAsStringAsync());

        Console.WriteLine(result);
    }

    [JSInvokable("OnServiceUpdateAvailable")]
    public async Task<string> AppUpdate()
    {
        // Get latest version number
        var response = await ClientUserManager.Http.GetAsync("User/GetCurrentVersion");
        TaskResult<string> result = Newtonsoft.Json.JsonConvert.DeserializeObject<TaskResult<string>>(await response.Content.ReadAsStringAsync());
        newVersion = result.Data;

        Console.WriteLine("New version available");
        hideUpdate = false;
        StateHasChanged();
        return await Task.FromResult("Alerted client");
    }

    [JSInvokable("OnServiceUpdateUnavailable")]
    public static void AppNotUpdate()
    {
        Console.WriteLine("New version not available");
    }
}
