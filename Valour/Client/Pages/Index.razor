@page "/"

@using Valour.Shared
@using Valour.Shared.Categories;
@inject HttpClient Http
@inject NavigationManager navManager
@using Microsoft.AspNetCore.SignalR.Client;
@inject IJSRuntime JS
@inject ClientPlanetManager planetManager
@inject ClientWindowManager windowManager
@inject SignalRManager signalRManager

<!-- Check login status -->
@if (ClientUserManager.IsLoggedIn())
{
    <link href="https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap" rel="stylesheet">
    <body style="height: 100%">
        <div class="mainrow">
            <div class="sidebar-menu">
                <div class="sidebar" id="sidebar1">

                    <div style="width: 250px">
                        <img class="valour-logo" src="icon-512.png">

                        <div style="display:inline-block; vertical-align: middle">
                            <p class="valour-name">
                                Valour
                            </p>
                            <p class="valour-version">
                                Version @GetType().Assembly.GetName().Version.ToString() Pre-Pre-Alpha
                            </p>
                        </div>
                    </div>


                    <MemberListComponent @ref="MemberListComponent"></MemberListComponent>

                </div>
                <div class="sidebar-2" id="sidebar2">
                    <CurrentPlanetComponent Planet="@planetManager.GetCurrent()"></CurrentPlanetComponent>

                    <div class="top-bar">
                    </div>
                    <UserInfoComponent User="@ClientUserManager.User"></UserInfoComponent>
                    <div class="category-list keep-scrolling" style="padding-bottom:80px" ondragover="setDraggedOver(event)" ondrop="Drop(event)">
                        @if (planetManager.GetCurrent() != null)
                        {
                            ClientWindow window = windowManager.GetSelectedWindow();
                            ChatChannelWindow channelWindow = (ChatChannelWindow)window;
                            Planet planet = planetManager.GetCurrent();
                            @foreach (ClientPlanetCategory category in GetTopLevelCategories())
                            {
                                <CategoryComponent PlanetCategoryChannelList="@PlanetCategoryChannelList" Category="@category" channelWindow="@channelWindow" planet="@planet" PlanetChannelList="@PlanetChannelList" IsTopLevel="true">
                                </CategoryComponent>
                            }
                        }
                    </div>

                </div>
            </div>
            <div class="channel-and-topbar" id="mainwindow">
                <div class="topbar">
                </div>
                <div class="topline">
                </div>
                <!--
                Todo: Logic for multiple main windows.
                This will be fun.
            -->
                <!--
                Add dummy window so Jacob doesn't cry
            -->
                @if (windowManager.GetWindowCount() == 0)
                {
                    windowManager.AddWindow(new HomeWindow(0));
                }

                @if (windowManager.GetWindowCount() < 4)
                {
                    <div class="add-window-button" @onclick="@OnAddWindow">
                        <NewWindowComponent></NewWindowComponent>
                    </div>
                }

                <div id="window-man" class="window-grid">

                    @if (windowManager.GetWindowCount() == 1)
                    {
                        <MainWindowComponent IndexPage="this" Window="windowManager.GetWindow(0)" StyleClass="main-window-full"></MainWindowComponent>
                    }
                    else if (windowManager.GetWindowCount() == 2)
                    {
                        <MainWindowComponent IndexPage="this" Window="windowManager.GetWindow(0)" StyleClass="main-window-full"></MainWindowComponent>
                        <MainWindowComponent IndexPage="this" Window="windowManager.GetWindow(1)" StyleClass="main-window-full"></MainWindowComponent>
                    }
                    else if (windowManager.GetWindowCount() == 3)
                    {
                        <div id="window-col1" class="window-col">
                            <MainWindowComponent IndexPage="this" Window="windowManager.GetWindow(0)" StyleClass="main-window-full"></MainWindowComponent>
                        </div>
                        <div id="window-col2" class="window-col">
                            <MainWindowComponent IndexPage="this" Window="windowManager.GetWindow(1)" StyleClass="main-window"></MainWindowComponent>
                            <MainWindowComponent IndexPage="this" Window="windowManager.GetWindow(2)" StyleClass="main-window"></MainWindowComponent>
                        </div>
                    }
                    else if (windowManager.GetWindowCount() == 4)
                    {
                        <div id="window-col1" class="window-col">
                            <MainWindowComponent IndexPage="this" Window="windowManager.GetWindow(0)" StyleClass="main-window"></MainWindowComponent>
                            <MainWindowComponent IndexPage="this" Window="windowManager.GetWindow(1)" StyleClass="main-window"></MainWindowComponent>
                        </div>
                        <div id="window-col2" class="window-col">
                            <MainWindowComponent IndexPage="this" Window="windowManager.GetWindow(2)" StyleClass="main-window"></MainWindowComponent>
                            <MainWindowComponent IndexPage="this" Window="windowManager.GetWindow(3)" StyleClass="main-window"></MainWindowComponent>
                        </div>
                    }
                </div>

            </div>
        </div>

        <ModalHolderComponent></ModalHolderComponent>
    </body>
}
else
{
    <LoginComponent></LoginComponent>
}

@code{
    public ConcurrentBag<ClientPlanetMember> planetMemberList = new ConcurrentBag<ClientPlanetMember>();

    public ConcurrentBag<ClientPlanetChatChannel> PlanetChannelList = new ConcurrentBag<ClientPlanetChatChannel>();

    public ConcurrentBag<ClientPlanetCategory> PlanetCategoryChannelList = new ConcurrentBag<ClientPlanetCategory>();

    public MemberListComponent MemberListComponent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        planetManager.OnPlanetChange += OnPlanetChange;
        planetManager.OnChannelsUpdate += OnChannelsUpdate;
        planetManager.OnChannelWindowUpdate += OnChannelWindowUpdate;
        planetManager.OnCategoriesUpdate += OnCategoriesUpdate;
        signalRManager.hubConnection.On<string>("RefreshChannelList", OnRefreshChannelList);
    }

    public async Task OnRefreshChannelList(string data)
    {

        ClientPlanet planet = planetManager.GetCurrent();

        IEnumerable<ClientPlanetChatChannel> channels = await planet.GetClientPlanetChannelsAsync(planet.Id);

        IEnumerable<ClientPlanetCategory> categories = await planet.GetClientPlanetCategoriesAsync(planet.Id);

        PlanetCategoryChannelList.Clear();

        PlanetChannelList.Clear();

        StateHasChanged();

        foreach (ClientPlanetChatChannel channel in channels)
        {
            PlanetChannelList.Add(channel);
        }

        foreach (ClientPlanetCategory category in categories)
        {
            PlanetCategoryChannelList.Add(category);
        }

        StateHasChanged();

    }

    public void Dispose()
    {
        planetManager.OnPlanetChange -= OnPlanetChange;
        planetManager.OnChannelsUpdate -= OnChannelsUpdate;
        planetManager.OnChannelWindowUpdate -= OnChannelWindowUpdate;
        planetManager.OnCategoriesUpdate -= OnCategoriesUpdate;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        await SetupWindows();
    }

    private async Task SetupWindows()
    {
        await JS.InvokeVoidAsync("SizeEnable");
    }

    private async Task OnAddWindow()
    {
        if (windowManager.GetWindowCount() == 4)
        {
            return;
        }

        windowManager.AddWindow(new HomeWindow(windowManager.GetWindowCount() - 1));

        StateHasChanged();
    }

    public async Task OnChannelWindowUpdate()
    {
        StateHasChanged();
    }

    public async Task OnCategoriesUpdate()
    {
        ClientPlanet dummy = new ClientPlanet();

        Planet planet = planetManager.GetCurrent();

        PlanetCategoryChannelList.Clear();

        foreach (ClientPlanetCategory category in await dummy.GetClientPlanetCategoriesAsync(planet.Id))
        {
            PlanetCategoryChannelList.Add(category);
        }

        StateHasChanged();
    }

    public List<ClientPlanetCategory> GetTopLevelCategories()
    {
        List<ClientPlanetCategory> list = PlanetCategoryChannelList.Where(x => x.Parent_Id == null).ToList();
        list.Sort((x, y) => x.Position.CompareTo(y.Position));
        return list;
    }

    public async Task OnChannelsUpdate()
    {
        ClientPlanet dummy = new ClientPlanet();

        Planet planet = planetManager.GetCurrent();

        PlanetChannelList.Clear();

        foreach (ClientPlanetChatChannel channel in await dummy.GetClientPlanetChannelsAsync(planet.Id))
        {
            PlanetChannelList.Add(channel);
        }

        StateHasChanged();
    }

    public async Task OnPlanetChange()
    {
        if (planetManager.GetCurrent() == null) return;

        var memberTask = Task.Run(async () =>
        {
            planetMemberList.Clear();
            var members = await planetManager.GetCurrent().GetAllMembers();
            foreach (var member in members) { planetMemberList.Add(member); }
            await MemberListComponent.SetMemberList(planetMemberList);
        });

        await OnChannelsUpdate();

        await OnCategoriesUpdate();

        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        JS.InvokeVoidAsync("FixClip");
        JS.InvokeVoidAsync("FitMobile");
    }

    [JSInvokable("OnRefocus")]
    public static async Task OnRefocus()
    {
        Console.WriteLine("Detected refocus event.");
        await SignalRManager.Current.ForceRefresh();
    }

    public async Task ForceRefresh()
    {
        StateHasChanged();
    }

    [JSInvokable("OnClickInterop")]
    public static async Task OnClickInterop(string target)
    {

    }
}