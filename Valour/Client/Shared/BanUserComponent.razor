@inject HttpClient Http
@inject NavigationManager navManager
@inject AutoMapper.IMapper Mapper 
@inject PlanetManager planetManager
@inject IJSRuntime JS

@using Valour.Shared.Categories

<section>
    <h2>Ban user</h2>

    <hr />
    <div asp-validation-summary="All" class="text-info"></div>
    <div class="form-group mt-2">
        <label>Reason</label>
        <input class="form-control" @bind-value="@reason" />
        <span id="name-span" style="color:#888888">@ReasonSpan</span>
    </div>
    <div class="form-group mt-2">
        <label>Time</label>
        <input class="form-control" @bind-value="@time" />
        <span id="name-span" style="color:#888888">@TimeSpan</span>
    </div>
    <span id="image-span" style="color:#888888">@infoSpan</span> 
    <div class="form-group mt-4">
        <button class="btn btn-primary mt-2" @onclick="OnClickSubmit">Ban</button>
    </div>
</section>
@code {
    // Input fields
    ulong time;

    string reason;

    // Spans
    string ReasonSpan = "Reason for ban";

    string TimeSpan = "Time in days, put any number under 0 to ban permanently";
    string infoSpan = "";

    private async Task OnClickSubmit(MouseEventArgs e)
    {

        // Require a name
        if (string.IsNullOrWhiteSpace(reason))
        {
            reason = "Please input a reason.";
            return;
        }


        // Encode non-friendly characters
        string encodedreason = System.Web.HttpUtility.UrlEncode(reason);

        ulong user_id = ClientUserManager.User.Id;
        string token = ClientUserManager.UserSecretToken;

        ulong Selecteduser_id = await JS.InvokeAsync<ulong>("GetSelectedUserId");

        ulong timeinminutes = time*24*60;

        var response = await Http.PostAsync($"api/planet/{planetManager.GetCurrent().Id}/members/{Selecteduser_id}/ban" +
                                                                   $"?reason={encodedreason}" +
                                                                   $"&time={(uint)timeinminutes}", null);

        var message = await response.Content.ReadAsStringAsync();
        
        infoSpan = message;
        
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine("A critical error occured banning a member.");
            Console.WriteLine(message);
        }
    }
}
