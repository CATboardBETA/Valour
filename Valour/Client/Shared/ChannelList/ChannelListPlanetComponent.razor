@inject ClientPlanetManager planetManager
@inject ClientWindowManager windowManager

<div class="@GetCssClass()" id="list-@Planet.Id">
    <div style="cursor:pointer" id="list-inner-@Planet.Id" @oncontextmenu="OnContextMenu">
        <div @onclick='@OnClick' style="width:85%; display:inline-block">
            <img class="arrow" src="media/Category-Icon.svg" style="@GetArrowStyle()">
            <p class="name">
                @Planet.Name
            </p>
        </div>
        <p class="add-channel-button" id="add-channel-button">
            +
        </p>
    </div>
    <div style="padding-left: 25px;">
        <!-- The Modal -->
        @if (Open)
        {
            @foreach (ClientPlanetCategory category in TopCategories)
            {
                <ChannelListCategoryComponent Categories="Categories"
                                              Channels="Channels"
                                              Category="category"
                                              IsTopLevel="true"
                                              @key='"list-category-" + category.Id'>
                </ChannelListCategoryComponent>
            }

        }
    </div>
</div>

@code {
    [Parameter]
    public ClientPlanet Planet { get; set; }

    public bool Open { get; set; }

    public List<ClientPlanetCategory> TopCategories;
    public List<ClientPlanetCategory> Categories { get; set; }
    public List<ClientPlanetChatChannel> Channels { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Initialize collections
        Categories = new List<ClientPlanetCategory>();
        Channels = new List<ClientPlanetChatChannel>();
        TopCategories = new List<ClientPlanetCategory>();

        // Handle list change
        planetManager.OnCategoriesUpdate += OnCategoriesUpdate;
        planetManager.OnChannelsUpdate += OnChannelsUpdate;

        // Handle single change
        planetManager.OnCategoryUpdate += OnCategoryUpdate;
        planetManager.OnChatChannelUpdate += OnChatChannelUpdate;

        await GetCategories();
        await GetChannels();
        GetTopLevelCategories();
    }

    public async Task OnContextMenu()
    {

    }

    public string GetCssClass()
    {
        if (Open)
        {
            return "category is-open top-level-category planet-list";
        }
        else
        {
            return "category top-level-category planet-list";
        }
    }

    public string GetArrowStyle()
    {
        if (Open)
            return "transform: rotate(90deg);";
        return "";
    }

    public void OnClick()
    {
        Open = !Open;
        StateHasChanged();
    }

    public void GetTopLevelCategories()
    {
        if (Categories == null) return;

        TopCategories = Categories.Where(x => x.Parent_Id == null)
                                  .OrderByDescending(x => x.Position)
                                  .ToList();

        Console.WriteLine($"Found {TopCategories.Count} top level categories");
    }

    public async Task OnChannelsUpdate()
    {
        await GetChannels();
        StateHasChanged();
    }

    public async Task OnCategoriesUpdate()
    {
        await GetCategories();
        StateHasChanged();
    }

    public async Task OnCategoryUpdate(ClientPlanetCategory category)
    {
        var oldCategory = Categories.FirstOrDefault(x => x.Id == category.Id);

        if (oldCategory == null)
        {
            Categories.Add(category);
            return;
        }

        var index = Categories.IndexOf(oldCategory);

        // Set to new category
        Categories[index] = category;

        StateHasChanged();
    }

    public async Task GetCategories()
    {
        Categories = await Planet.GetCategoriesAsync();
        GetTopLevelCategories();
    }

    public async Task OnChatChannelUpdate(ClientPlanetChatChannel channel)
    {

        //Console.WriteLine(channel.Name);

        var oldChannel = Channels.FirstOrDefault(x => x.Id == channel.Id);

        //Console.WriteLine(oldChannel.Name);

        if (oldChannel == null)
        {
            Channels.Add(channel);
            return;
        }

        var index = Channels.IndexOf(oldChannel);

        // Set to new channel
        Channels[index] = channel;

        StateHasChanged();
    }

    public async Task GetChannels()
    {
        Channels = await planetManager.GetCurrent().GetChannelsAsync();
    }
}
