@inject HttpClient Http
@inject NavigationManager navManager
@inject IJSRuntime JS
@inject ClientPlanetManager planetManager
@inject ClientWindowManager windowManager
@implements IDisposable

<div class="d-flex flex-column window" style="height:100%; max-width:100%;" id="window" @onclick="@OnClickWindow">

    <div class="channel-info">
        <h3 class="title">
            @Channel.Name
        </h3>
        @if (!string.IsNullOrWhiteSpace(Channel.Description))
        {
            <p class="description">
                @Channel.Description
            </p>
        }

        <div class="channel-buttons">
            <div class="channel-home" @onclick="ReturnHome">
                Home
            </div>
            @if (windowManager.GetWindowCount() > 1)
            {
            <div class="channel-close" @onclick="CloseWindow">
                X
            </div>
            }
        </div>

    </div>

    <MessageHolderComponent @key='$"mh-{Window.Index}"' Window="Window" Messages="Window.messages" @ref="MessageHolder"></MessageHolderComponent>

    <div class="textbox-holder ml-1" @onclick="ScrollToBottomAnim">
        <center>
            <textarea id="text-input" class="textbox" rows="2" @bind-value="@currentInput" @bind-value:event="oninput" @onkeypress="OnChatboxKeypress" @onpaste="OnChatboxInput">@currentInput</textarea>
        </center>
    </div>
</div>

@code{
    /// <summary>
    /// True if the client has negotiated a channel connection
    /// </summary>
    private bool channelConnected;

    /// <summary>
    /// The input currently within the chatbox, this is bound and any changes will
    /// be reflected within the box.
    /// </summary>
    private string currentInput;

    [Parameter]
    public ChatChannelWindow Window { get; set; }

    [Parameter]
    public Valour.Client.Pages.Index IndexPage { get; set; }

    [Parameter]
    public MainWindowComponent MainWindow { get; set; }

    public ClientPlanetChatChannel Channel;

    public ClientPlanet Planet;

    public Func<Task> ForceRefreshMessages;

    public bool ForceMessageRefresh;

    public MessageHolderComponent MessageHolder { get; set; }

    // Runs when page is initialized
    protected override async Task OnInitializedAsync()
    {
        Window.messages = new List<ClientPlanetMessage>();

        Channel = Window.Channel;

        Planet = await Window.Channel.GetPlanetAsync();

        // Get newest role definitions
        await planetManager.LoadPlanetRoles(Planet);

        Window.Component = this;

        ClientPlanetManager.Current.OnMemberUpdate += OnPlanetMemberUpdate;
        ClientPlanetManager.Current.OnRoleUpdate += OnPlanetRoleUpdate;

        await JS.InvokeVoidAsync("OnChannelLoad", null);

        await JS.InvokeVoidAsync("SetupWindow", Window.Index);

        await JS.InvokeVoidAsync("SetSecretKey", ClientUserManager.UserSecretToken,ClientUserManager.User.Id, planetManager.GetCurrent().Id);

        await SetupNewChannelAsync();
    }

    void IDisposable.Dispose()
    {
        ClientPlanetManager.Current.OnMemberUpdate -= OnPlanetMemberUpdate;
    }

    public async Task OnPlanetMemberUpdate(ClientPlanetMember member)
    {
        if (member.Planet_Id != Planet.Id){
            return;
        }

        foreach (var msg in MessageHolder.RenderedMessages.Where(x => x.Author.User_Id == member.User_Id))
        {
            //Console.WriteLine(msg.Message.Message_Index);

            // Update member reference
            msg.Author = member;
            await msg.RefreshMessage();
        }
    }

    public async Task OnPlanetRoleUpdate(PlanetRole role)
    {
        if (role.Planet_Id != Planet.Id)
        {
            return;
        }

        foreach (var msg in MessageHolder.RenderedMessages.Where(x => x.Author.TryGetPrimaryRoleId() == role.Id))
        {
            await msg.RefreshMessage();
        }
    }

    public async Task CloseWindow()
    {
        await planetManager.ClosePlanetChatChannel(this);
        windowManager.CloseWindow(Window.Index);
        await IndexPage.ForceRefresh();
    }

    public async Task ReturnHome()
    {
        await planetManager.ClosePlanetChatChannel(this);

        HomeWindow newWindow = new HomeWindow(Window.Index);

        windowManager.SetWindow(Window.Index, newWindow);
        MainWindow.RefreshWindow(newWindow);
    }

    public async Task SetupNewChannelAsync()
    {
        if (Window.messages == null)
        {
            Window.messages = new List<ClientPlanetMessage>();
        }
        else
        {
            Window.messages.Clear();
        }

        await planetManager.OpenPlanetChatChannel(this);

        // Request messages from server
        Window.messages.AddRange(await Channel.GetLastMessagesAsync(64));

        if (Window.messages.Count > 0)
        {
            Window.firstMessageIndex = Window.messages[0].Message_Index;
            Window.messageIndex = Window.messages[Window.messages.Count - 1].Message_Index;
        }

        ForceMessageRefresh = true;

        StateHasChanged();

        ForceMessageRefresh = false;

        //while (true){
        //      PostMessage(Guid.NewGuid().ToString());
        //   }
    }

    public async Task OnWindowChannelChange(ClientPlanetChatChannel newchannel)
    {
        await planetManager.ClosePlanetChatChannel(this);
        Window.Channel = newchannel;
        Channel = newchannel;

        await SetupNewChannelAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await JS.InvokeVoidAsync("ScrollWindowBottom", Window.Index);
    }

    public async Task OnWindowClosed()
    {
        Console.WriteLine($"Gracefully exiting channel {Channel.Id} due to window change.");
        await planetManager.ClosePlanetChatChannel(this);
    }

    public async Task OnRecieveMessage(ClientPlanetMessage message)
    {
        if (!Window.messages.Any(x => x.Message_Index == message.Message_Index)){
            Window.messages.Add(message);
        }
        //else
        //{
        //    Console.WriteLine("Prevented egg error");
        //}

        Window.messageIndex = message.Message_Index;

        //Get current window scroll pos

        bool IsAtBottom = await JS.InvokeAsync<bool>("IsAtBottom", Window.Index);

        // check if theres too many messages
        if (IsAtBottom && Window.messages.Count > 120) {
            Window.messages.RemoveRange(0, Window.messages.Count - 120);
            Window.firstMessageIndex = Window.messages.ElementAt(0).Message_Index;
        }

        // Flag for UI refresh
        StateHasChanged();
        //MessageHolder.ForceRefresh();

        await ScrollToBottom();
    }

    public async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("ScrollWindowBottom", Window.Index);
    }

    public async Task ScrollToBottomAnim()
    {
        await JS.InvokeVoidAsync("ScrollWindowBottomAnim", Window.Index);
    }

    /// <summary>
    /// This runs every time a key is pressed when the chatbox is selected
    /// </summary>
    public async Task OnChatboxKeypress(KeyboardEventArgs args)
    {
        // Debug for key presses
        // Console.WriteLine(currentInput);

        if (args.Key == "Enter" && !args.ShiftKey)
        {
            // Grab current input
            string msg = currentInput;

            Console.WriteLine(currentInput);

            string temp = msg;

            temp = temp.TrimEnd('\n');
            temp = temp.Trim();

            if (string.IsNullOrWhiteSpace(temp))
            {
                return;
            }

            currentInput = "";

            if (temp != "")
            {
                // Post message to server
                //StateHasChanged();
                await PostMessage(msg);
                currentInput = currentInput.TrimStart('\n'); // Fix odd bug
            }
        }
    }

    public async Task OnChatboxInput()
    {

    }

    public async Task OnClickWindow()
    {
        ClientPlanet planet = await ClientPlanetManager.Current.GetPlanetAsync(Channel.Planet_Id);
        await planetManager.SetCurrentPlanet(planet);
    }

    public async Task PostMessage(string msg)
    {
        PlanetMessage message = new PlanetMessage()
        {
            Channel_Id = Channel.Id,
            Content = msg,
            TimeSent = DateTime.UtcNow,
            Author_Id = ClientUserManager.User.Id,
            Planet_Id = Channel.Planet_Id
        };

        string json = Newtonsoft.Json.JsonConvert.SerializeObject(message);

        Console.WriteLine("SEND: \n" + json);

        HttpResponseMessage httpresponse = await Http.PostAsJsonAsync<PlanetMessage>($"Channel/PostMessage?token={ClientUserManager.UserSecretToken}", message);

        TaskResult response = Newtonsoft.Json.JsonConvert.DeserializeObject<TaskResult>(await httpresponse.Content.ReadAsStringAsync());

        Console.WriteLine(response.ToString());
    }

    public async Task UpdateScrollPosition()
    {
        await JS.InvokeVoidAsync("UpdateScrollPosition", Window.Index);
    }

    public async Task ScaleScrollPosition()
    {
        await JS.InvokeVoidAsync("ScaleScrollPosition", Window.Index);
    }

    [JSInvokable("OnScrollTopInvoke")]
    public static async Task OnScrollTop(int index)
    {
        ChatChannelWindow Window = ClientWindowManager.Instance.GetWindow(index) as ChatChannelWindow;

        if (Window == null)
        {
            Console.WriteLine("Channel window is null in OnScrollTop!");
            return;
        }

        Console.WriteLine($"Fetching older messages from index {Window.firstMessageIndex} for window {Window.Index}");

        var messages = await Window.Channel.GetMessagesAsync(Window.firstMessageIndex, 32);

        if (messages == null || messages.Count() == 0)
        {
            return;
        }

        await Window.Component.UpdateScrollPosition(); // This saves the scroll position
        Window.messages.InsertRange(0, messages);
        Window.firstMessageIndex = messages.ElementAt(0).Message_Index;
        Window.Component.StateHasChanged();
        await Window.Component.ScaleScrollPosition(); // This ensures the page doesnt move harshly
    }
}