@inject HttpClient Http
@inject NavigationManager navManager
@inject AddChannelContextMenu contextMenu
@inject IJSRuntime JS
@inject CreateCategoryModal createCategoryModal

<section>
    <h2 class="create-component-title">Create a Category</h2>

    <div asp-validation-summary="All" class="text-info"></div>
    <div class="form-group mt-2"> 
        <label>Category Name</label>
        <input class="form-control" @bind-value="@name" />
    </div>
    <div style="margin-top:20px;">
        <div class="perm-list-name mb-1">
            Private Category
        </div>
        <div type="button" style="float: right">
            <label class="switch">
                <input type="checkbox" @onclick="PrivateSwitch" checked="@isprivate">
                <span class="slider round"></span>
            </label>
        </div>
    </div>

    @if (isprivate) {
        <label style="margin-top: 12px;">Who can see and send messages in this Category?</label>
        <div class="create-component-roles-box">
            @foreach (Role role in Roles)
            {
                <div class="role">
                   <div class="perm-list-name mb-1" style="color: @role.GetColorHex();">
                        @role.Name
                    </div>
                    <div type="button" style="float: right">
                        <label class="switch">
                            <input type="checkbox" OnStateChange="SwitchRole(role)" checked="@SelectedRoles[role]">
                            <span class="slider round"></span>
                        </label>
                    </div> 
                </div>

            }
        </div>
    }

    <span id="image-span" style="color:#888888">@imageSpan</span>
    
    <div class="form-group mt-4">
        <center>
            <button class="btn btn-primary mt-2" @onclick="OnClickSubmit">Create</button>
        </center>
    </div>
</section>

@code {

    // Input fields
    string name;

    // Spans
    string imageSpan = "";
    Dictionary<Role, bool> SelectedRoles = new();

    List<Role> Roles = new();
    bool isprivate = false;

    protected override async Task OnInitializedAsync() {
        Roles.Clear();
        SelectedRoles.Clear();

        Member SelfMember = await ValourClient.GetSelfMember(createCategoryModal.Planet);

        var roles = await createCategoryModal.Planet.GetRolesAsync();

        ulong SelfAuthority = await SelfMember.GetAuthorityAsync();
        foreach (Role item in roles)
        {
            if (item.GetAuthority() >= SelfAuthority)
                continue;
            Roles.Add(item);
            SelectedRoles.Add(item, false);
        }
        StateHasChanged();
    }

    private void SwitchRole(Role role) {
        SelectedRoles[role] = !SelectedRoles[role];
    }
    private void PrivateSwitch() {
        isprivate = !isprivate;
    }

    private async Task OnClickSubmit(MouseEventArgs e)
    {

        // Require a name
        if (string.IsNullOrWhiteSpace(name))
        {
            name = "Please input a category name.";
            return;
        }

        ulong planet_id = contextMenu.SelectedCategory.Planet_Id;
        ulong parent_id = contextMenu.SelectedCategory.Id;
        ulong user_id = ValourClient.Self.Id;
        //string token = ValourClient.Token;

        Category category = new(){
            Name = name,
            Description = "A category",
            Parent_Id = parent_id,
            Planet_Id = planet_id
        };

        var response = await ValourClient.PostAsync($"api/planet/{planet_id}/categories", category);

        if (!response.Success)
        {
            imageSpan = "An error occured retrieving a response. Please try again.";
            return;
        }

        ulong category_id = ulong.Parse(response.Message);

        imageSpan = "Success";

        if (isprivate) {
            // set the default role channel view perms to false

            PermissionsNode PermissionsNode = new()
            {
                Target_Id = category_id,
                Planet_Id = planet_id,
                Role_Id = createCategoryModal.Planet.Default_Role_Id,
                Mask = 0x00,
                Code = 0x00,
                Target_Type = ItemType.Category
            };

            PermissionsNode.SetPermission(CategoryPermissions.View, PermissionState.False);

            response = await ValourClient.PostAsync($"api/node/category", PermissionsNode);

            foreach (Role role in Roles)
            {
                
                if (!SelectedRoles[role]) {
                    continue;
                }
                
                PermissionsNode = new()
                {
                    Target_Id = category_id,
                    Planet_Id = planet_id,
                    Role_Id = role.Id,
                    Mask = 0x00,
                    Code = 0x00,
                    Target_Type = ItemType.Category
                };

                PermissionsNode.SetPermission(CategoryPermissions.View, PermissionState.True);

                response = await ValourClient.PostAsync($"api/node/category", PermissionsNode);
                // TODO: Clean this
            }
        }

        // close model

        createCategoryModal.Component.SetVisibility(false);


    }

    private async Task OnImageInput()
    {

    }
}
