@inject IJSRuntime JS
@inject ClientPlanetManager planetManager

<h3>Edit Roles</h3>
<hr />
<br />

<div class="settings-inner">
    @if (!editMode)
    {
        if (Selected == null)
        {
            <div class="container">

                @foreach (PlanetRole role in Roles)
                {
                    // For magic lambda
                    var role_x = role;

                    <div class="row mt-2">
                        <div class="role-edit-row">
                            <div class="role-edit">
                                <p style="color:@role.GetColorHex()">
                                    @role.Name
                                </p>
                            </div>
                            <div class="btn-role-edit edit" @onclick="() => OnClickEdit(role_x)">
                                <p class="center-t">
                                    Edit
                                </p>
                            </div>
                            <div class="btn-role-edit delete">
                                <p class="center-t">
                                    Delete
                                </p>
                            </div>
                        </div>
                    </div>
                }

                <div class="row mt-2">
                    <div class="btn-role-edit create" @onclick="OnClickCreateMode">
                        <p class="center-t">
                            Create
                        </p>
                    </div>
                </div>

            </div>
        }
    }
    else
    {
        <div class="rolecreate-cont">
            <div class="form-group mt-2">
                <label>Role Name</label>
                <input class="form-control" @bind-value="@role.Name" />
                <span id="rolename-span" class="text-danger">@roleNameSpan</span>
            </div>
            <div class="form-group mt-2 ml-2">
                <label>Color</label>
                <div class="picker-holder">
                    <ColorPickerComponent></ColorPickerComponent>
                </div>
            </div>

        </div>
        <div class="mt-2" style="display: block">
            <div class="btn-role-edit create" style="margin-left: 0px" @onclick="OnClickSave">
                <p class="center-t">
                    Save
                </p>
            </div>

            <div class="mt-2">
                <span id="result-span" class="text-info">@resultSpan</span>
                <span id="error-span" class="text-danger" style="display:block">@errorSpan</span>
            </div>
        </div>

        <br />
        <hr />
        <br />

        <h5 style="display: inline-block">Role Permissions</h5>
        <h7 style="float: right">Code for nerds: @role.Permissions &nbsp;</h7>

        @for (int i = 0; i < PlanetPermissions.Permissions.Length; i++)
        {
            PlanetPermission planetPerm = PlanetPermissions.Permissions[i];

            int val = i; // You have to do this for wacky binding reasons

            <div class="perm-list-item">
                <div class="perm-list-name mb-1">
                    @planetPerm.Name
                </div>
                <div type="button" style="float: right">
                    <label class="switch">
                      <input type="checkbox" @onclick="(e => PermClick(val))" checked="@rolePermValues[i]">
                      <span class="slider round"></span>
                    </label>
                </div>
                <div class="perm-list-desc mt-1">
                    @planetPerm.Description
                </div>
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public ClientPlanet Planet { get; set; }

    public List<PlanetRole> Roles = new List<PlanetRole>();

    // Stuff for role creation //

    public PlanetRole role = new PlanetRole()
    {
        Name = "New Role",
        Color_Red = 255,
        Color_Green = 255,
        Color_Blue = 255
    };

    public bool editMode = false;

    public string roleNameSpan = "";

    public string resultSpan = "";

    public string errorSpan = "";

    public bool[] rolePermValues = new bool[PlanetPermissions.Permissions.Length];

    // Stuff for role editing //

    public PlanetRole Selected { get; set; }

    public void PermClick(int id)
    {
        rolePermValues[id] = !rolePermValues[id];
        Console.WriteLine($"Toggled value for permission {id}");
        UpdatePermCode();
    }

    public void UpdatePermCode()
    {
        role.Permissions = 0x00;

        for (int i = 0; i < rolePermValues.Length; i++)
        {
            if (rolePermValues[i])
            {
                role.Permissions |= PlanetPermissions.Permissions[i].Value;
            }
        }

        //StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        Roles = await Planet.GetRolesAsync();
        planetManager.OnRolesUpdate += OnRolesUpdate;
    }

    public async Task OnClickEdit(PlanetRole editRole)
    {
        role = editRole;
        editMode = true;

        rolePermValues = new bool[PlanetPermissions.Permissions.Length];

        for (int i = 0; i < PlanetPermissions.Permissions.Length; i++)
        {
            rolePermValues[i] = ((editRole.Permissions & PlanetPermissions.Permissions[i].Value) 
                                                      == PlanetPermissions.Permissions[i].Value);
        }

        await JS.InvokeVoidAsync("SetColorPickerColor", role.GetColorHex());

        StateHasChanged();
    }

    public async Task OnClickCreateMode()
    {
        role = new PlanetRole(){
            Name = "New Role",
            Bold = false,
            Italics = false,
            Planet_Id = Planet.Id
        };

        rolePermValues = new bool[PlanetPermissions.Permissions.Length];
        editMode = true;
        StateHasChanged();
    }

    public async Task OnClickSave()
    {
        resultSpan = "";
        errorSpan = "";

        // Get chosen color
        float[] color = await JS.InvokeAsync<float[]>("GetChosenColor");

        role.Color_Red = (byte)Math.Round(color[0]);
        role.Color_Green = (byte)Math.Round(color[1]);
        role.Color_Blue = (byte)Math.Round(color[2]);

        Console.WriteLine($"Chosen color: rgb({role.Color_Red}, {role.Color_Green}, {role.Color_Blue})");

        // Create json payload to send to server for request
        // Id and authority is handled by the server

        //string json = JsonConvert.SerializeObject(role);

        HttpResponseMessage response = null;

        // If the id is not set, this is a new role to be created
        if (role.Id == 0)
        {
            response = await ClientUserManager.Http.PostAsJsonAsync($"Planet/CreateRole?planet_id={Planet.Id}" +
                                                                                         $"&token={ClientUserManager.UserSecretToken}", role);
        }
        // Otherwise we are editing a prior role
        else
        {
            response = await ClientUserManager.Http.PostAsJsonAsync($"Planet/EditRole?planet_id={Planet.Id}" +
                                                                                   $"&token={ClientUserManager.UserSecretToken}", role);
        }

        TaskResult result = JsonConvert.DeserializeObject<TaskResult>(
            await response.Content.ReadAsStringAsync());

        if (result == null)
        {
            errorSpan = "No response from server!";
        }
        else
        {
            if (result.Success)
            {
                resultSpan = result.Message;

                // If creating, send back to role list afterwards
                if (role.Id == 0)
                {
                    editMode = false;
                }
            }
            else
            {
                errorSpan = result.Message;
            }
        }

        StateHasChanged();
    }

    // Handle role list changes that may occur while open
    public async Task OnRolesUpdate()
    {
        Roles = await Planet.GetRolesAsync();
        StateHasChanged();
    }
}
