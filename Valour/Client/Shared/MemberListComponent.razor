@inject ClientWindowManager windowManager

<div class="RoleList keep-scrolling">
    @if (MemberList != null)
    {
        foreach (KeyValuePair<Role, List<Member>> roleMemberList in RoleMemberLists)
        {
            <RoleComponent Role="@roleMemberList.Key" Members="@roleMemberList.Value"></RoleComponent>
        }

        // online group
        // this group is for members whose roles lack DisplayRole permission
        @if (OnlineList.Count() > 0)
        {
            <RoleComponent DummyName="Online" Members="@OnlineList"></RoleComponent>
        }

        // offline group
        @if (OfflineList.Count() > 0)
        {
            <RoleComponent DummyName="Offline" Members="@OfflineList"></RoleComponent>
        }

    }
</div>

@code {

    public List<Member> MemberList { get; set; }
    public List<Member> OrderedList { get; set; }

    public List<Role> Roles { get; set; }

    public Dictionary<Role, List<Member>> RoleMemberLists { get; set; }
    public List<Member> OnlineList { get; set; }
    public List<Member> OfflineList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        RoleMemberLists = new Dictionary<Role, List<Member>>();
        OnlineList = new List<Member>();
        OfflineList = new List<Member>();

        windowManager.OnPlanetFocused += OnPlanetChange;
        Role.OnAnyUpdated += OnRoleUpdate;
        Member.OnAnyUpdated += OnMemberUpdate;
        Role.OnAnyDeleted += OnRoleDeletion;
    }

    public async Task OnMemberUpdate(Member member)
    {
        // not awaited on purpose
        if (member.Planet_Id == windowManager.FocusedPlanet.Id)
        {
            await RefreshOnRoleChange();
        }

    }

    public async Task OnRoleDeletion(Role role)
    {
        // not awaited on purpose
        if (role.Planet_Id == windowManager.FocusedPlanet.Id)
        {
            await RefreshOnRoleChange();
        }
    }

    public async Task OnRoleUpdate(Role role)
    {
        // not awaited on purpose
        if (role.Planet_Id == windowManager.FocusedPlanet.Id)
        {
            await RefreshOnRoleChange();
        }
    }

    public async Task RefreshOnRoleChange()
    {
        RoleMemberLists.Clear();
        OnlineList.Clear();
        OfflineList.Clear();
        StateHasChanged();
        await BuildRoleLists();
        StateHasChanged();
    }

    public async Task BuildRoleLists()
    {
        OrderedList = MemberList.OrderByDescending(GetComparator).ToList();

        RoleMemberLists.Clear();
        OnlineList.Clear();
        OfflineList.Clear();

        foreach (var member in OrderedList)
        {

            var user = await member.GetUserAsync();

            // Don't list at all if this is true
            if (user.Last_Active_Span.TotalDays > 7)
                continue;

            // Throw directly into offline group
            if (user.UserState.Value == UserState.Offline.Value)
            {
                OfflineList.Add(member);
                continue;
            }

            // Get role ids
            var member_roles = await member.GetRolesAsync();

            bool hadRole = false;

            // Try for a role
            foreach (Role role in Roles)
            {
                // Ensure role should be listed
                if (!role.HasPermission(PlanetPermissions.DisplayRole))
                    continue;

                // Member has role
                if (member_roles.Contains(role))
                {
                    // Ensure there is a list
                    if (!RoleMemberLists.ContainsKey(role))
                    {
                        RoleMemberLists.Add(role, new List<Member>());
                    }

                    RoleMemberLists[role].Add(member);

                    // Break from loop since we have already succeeded
                    hadRole = true;
                    break;
                }
            }

            // Online pass
            if (!hadRole)
            {
                OnlineList.Add(member);
            }
        }
    }

    public async Task OnPlanetChange(Planet planet)
    {
        var t = Task.Run(async () =>
        {
            if (planet != null)
            {
                Console.WriteLine($"Member list is updating to {planet.Name}");
                MemberList = await planet.GetMembersAsync();
                Roles = await planet.GetRolesAsync();    
                MemberList = MemberList.OrderByDescending(GetComparator).ToList();
            }
            else
            {
                MemberList = new List<Member>();
            }

            await BuildRoleLists();

            Console.WriteLine($"Starting with {MemberList.Count()} members.");
            StateHasChanged();
        });
    }

    public long GetComparator(Member m)
    {
        var task = m.GetUserAsync();
        task.Wait();

        return task.Result.Last_Active.Ticks;
    }
}
