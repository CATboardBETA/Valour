@inject ClientPlanetManager planetManager

<div class="RoleList keep-scrolling">
    @if (MemberList != null)
    {
        foreach (KeyValuePair<PlanetRole, List<ClientPlanetMember>> roleMemberList in RoleMemberLists)
        {
            <RoleComponent Role="@roleMemberList.Key" Members="@roleMemberList.Value"></RoleComponent>
        }

        // online group
        // this group is for members whose roles lack DisplayRole permission
        @if (OnlineList.Count() > 0)
        {
            <RoleComponent DummyName="Online" Members="@OnlineList"></RoleComponent>
        }

        // offline group
        @if (OfflineList.Count() > 0)
        {
            <RoleComponent DummyName="Offline" Members="@OfflineList"></RoleComponent>
        }
        
    }
</div>

@code {
 
    public List<ClientPlanetMember> MemberList { get; set; }
    public List<ClientPlanetMember> OrderedList { get; set; }

    public List<PlanetRole> PlanetRoles {get; set;}

    public Dictionary<PlanetRole, List<ClientPlanetMember>> RoleMemberLists { get; set; }
    public List<ClientPlanetMember> OnlineList { get; set; }
    public List<ClientPlanetMember> OfflineList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        RoleMemberLists = new Dictionary<PlanetRole, List<ClientPlanetMember>>();
        OnlineList = new List<ClientPlanetMember>();
        OfflineList = new List<ClientPlanetMember>();

        planetManager.OnPlanetChange += OnPlanetChange;
        planetManager.OnRoleUpdate += OnRoleUpdate;
        planetManager.OnMemberUpdate += OnMemberUpdate;
        planetManager.OnRoleDeletion += OnRoleDeletion;
    }

    public async Task OnMemberUpdate(ClientPlanetMember member)
    {
        // not awaited on purpose
        if (member.Planet_Id == planetManager.GetCurrent().Id)
        {
            await RefreshOnRoleChange();
        }
        
    }

    public async Task OnRoleDeletion(PlanetRole role)
    {
        // not awaited on purpose
        if (role.Planet_Id == planetManager.GetCurrent().Id)
        {
            await RefreshOnRoleChange();
        }
    }

    public async Task OnRoleUpdate(PlanetRole role)
    {
        // not awaited on purpose
        if (role.Planet_Id == planetManager.GetCurrent().Id)
        {
            await RefreshOnRoleChange();
        }
    }

    public async Task RefreshOnRoleChange()
    {
        OrderedList = MemberList.OrderByDescending(GetComparator).ToList();
        RoleMemberLists.Clear();
        OnlineList.Clear();
        OfflineList.Clear();
        StateHasChanged();
        await BuildRoleLists();
        StateHasChanged();
    }

    public async Task BuildRoleLists()
    {
        RoleMemberLists.Clear();
        OnlineList.Clear();
        OfflineList.Clear();

        foreach (var member in OrderedList)
        {
            var user = await member.GetUserAsync();

            // Don't list at all if this is true
            if (user.Last_Active_Span.TotalDays > 7)
                continue;

            // Throw directly into offline group
            if (user.UserState.Value == UserState.Offline.Value)
            {
                OfflineList.Add(member);
                continue;
            }

            // Get role ids
            var roleids = await member.GetRoleIdsAsync();

            bool hadRole = false;

            // Try for a role
            foreach (PlanetRole role in PlanetRoles)
            {
                // Ensure role should be listed
                if (!role.HasPermission(PlanetPermissions.DisplayRole))
                    continue;

                // Member has role
                if (roleids.Contains(role.Id))
                {
                    // Ensure there is a list
                    if (!RoleMemberLists.ContainsKey(role))
                    {
                        RoleMemberLists.Add(role, new List<ClientPlanetMember>());
                    }

                    RoleMemberLists[role].Add(member);

                    // Break from loop since we have already succeeded
                    hadRole = true;
                    break;
                }
            }

            // Online pass
            if (!hadRole)
            {
                OnlineList.Add(member);
            }
        }
    }

    public async Task OnPlanetChange(ClientPlanet planet)
    {
        Console.WriteLine($"Member list is updating to {planet.Name}");
        MemberList = await planetManager.GetCachedPlanetMembers(planet);
        PlanetRoles = await planetManager.GetCurrent().GetRolesAsync();
        OrderedList = MemberList.OrderByDescending(GetComparator).ToList();
        await BuildRoleLists();
        Console.WriteLine($"Starting with {OrderedList.Count()} members.");
        StateHasChanged();
    }

    public long GetComparator(ClientPlanetMember m)
    {
        var task = m.GetUserAsync();
        task.Wait();

        return task.Result.Last_Active.Ticks;
    }
}
