@inject ClientPlanetManager planetManager
@inject MemberContextMenu memberContextMenu

<div id="m-@Message.Channel_Id-@Message.Message_Index" class="message">
    <div style="display:inline-block; position: absolute">
        <img class="author-pfp" src="@pfpurl" @onerror="OnPfpError" />
        <div class="time-container">
            <p class="time">
                @Message.TimeSent.ToLocalTime().ToShortTimeString().Replace(' ', '\0')
            </p>
        </div>
    </div>
    <div class="message-content">
        @if (Author != null)
        {
            <p class="author-name" style="color: @roleColor;" id="@Author.Id,@planetManager.GetCurrent().Id" 
            @onmouseup="OnAuthorNameClick">
                @name
            </p>

            <p class="role-name">
                &nbsp;- @roleName
            </p>
        }
        else
        {
            <p class="author-name" style="color: @roleColor;">
                User not found
            </p>
        }
        <p class="content">
            @MarkdownManager.GetHtml(Message.Content)
        </p>
    </div>
</div>

@code {
    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public ClientPlanetMessage Message { get; set; }

    private ClientPlanetMember Author;

    string roleColor = "#ffffff";

    string roleName = "Default";

    string pfpurl = "/icon-512.png";

    string name = "";

    public async Task OnAuthorNameClick(MouseEventArgs e)
    {
        if (e.Button == 2)
        {
            await memberContextMenu.Open(e, Author);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Author = await Message.GetAuthorAsync();

        name = await Author.GetNameAsync();

        roleColor = await Author.GetColorHexAsync();

        roleName = (await Author.GetPrimaryRoleAsync()).Name;

        string pfp = await Author.GetPfpAsync();

        if (Author != null && !string.IsNullOrWhiteSpace(pfp))
        {
            pfpurl = pfp;
        }
    }

    protected async Task OnPfpError()
    {
        pfpurl = "/icon-512.png";

        Console.WriteLine("pfp error caught");

        StateHasChanged();
    }

}
