@inject ClientPlanetManager planetManager
@inject MemberContextMenu memberContextMenu
@implements IDisposable

<div id="m-@Message.Channel_Id-@Message.Message_Index" class="@Class">
    <div style="display:inline-block; position: absolute">
        <img class="author-pfp" src="@pfpurl" @onerror="OnPfpError" />
        <div class="time-container">
            <p class="time">
                @Message.TimeSent.ToLocalTime().ToShortTimeString().Replace(' ', '\0')
            </p>
        </div>
    </div>
    <div class="message-content">
        @if (Author != null)
        {
            <p class="author-name" style="color: @roleColor;" id="@Author.Id,@Message.Channel_Id"
               @onmouseup="OnAuthorNameClick">
                @name
            </p>

            <p class="role-name">
                &nbsp;- @roleName
            </p>
        }
        else
        {
            <p class="author-name" style="color: @roleColor;">
                User not found
            </p>
        }
        <p class="content">
            <MessageContentComponent Message="Message"></MessageContentComponent>
        </p>
    </div>
</div>

@code {
    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public ClientPlanetMessage Message { get; set; }

    [Parameter]
    public MessageHolderComponent Holder { get; set; }

    [Parameter]
    public string Key { get; set; }

    public ClientPlanetMember Author;

    public bool ShouldRenderValue = false;

    public string Class
    {
        get
        {
            if (mentioned)
            {
                return "message mentioned";
            }
            else
            {
                return "message";
            }
        }
    }

    string roleColor = "#ffffff";

    string roleName = "Default";

    string pfpurl = "/icon-512.png";

    string name = "";

    bool mentioned = false;

    public async Task OnAuthorNameClick(MouseEventArgs e)
    {
        if (e.Button == 2)
        {
            await memberContextMenu.Open(e, Author);
        }
    }

    public async Task RefreshMessage()
    {
        await BuildMessage();
        StateHasChanged();
    }

    public async Task BuildMessage()
    {
        Author = await Message.GetAuthorAsync();

        name = await Author.GetNameAsync();

        roleColor = await Author.GetColorHexAsync();

        roleName = (await Author.GetPrimaryRoleAsync()).Name;

        string pfp = await Author.GetPfpAsync();

        var self_id = Holder.Window.Component.SelfMember.Id;

        mentioned = Message.MemberMentions.Any(x => x.Member_Id == self_id);

        if (Author != null && !string.IsNullOrWhiteSpace(pfp))
        {
            pfpurl = pfp;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Holder.AddRenderedMessage(this);

        ClientPlanetManager.Current.OnMemberUpdate += OnMemberUpdate;

        ClientPlanetManager.Current.OnRoleDeletion += OnRoleDeletion;

        ClientPlanetManager.Current.OnRoleUpdate += OnRoleUpdate;

        await BuildMessage();
    }

    public async Task OnRoleUpdate(PlanetRole role)
    {
        Author = await Message.GetAuthorAsync();
        roleColor = await Author.GetColorHexAsync();
        roleName = (await Author.GetPrimaryRoleAsync()).Name;
        ShouldRenderValue = true;
        StateHasChanged();
        ShouldRenderValue = false;
    }

    public async Task OnRoleDeletion(PlanetRole role)
    {
        Author = await Message.GetAuthorAsync();
        roleColor = await Author.GetColorHexAsync();
        roleName = (await Author.GetPrimaryRoleAsync()).Name;
        ShouldRenderValue = true;
        StateHasChanged();
        ShouldRenderValue = false;
    }

    public async Task OnMemberUpdate(ClientPlanetMember member)
    {
        if (member.Id == Author.Id)
        {
            Author = await Message.GetAuthorAsync();
            roleColor = await Author.GetColorHexAsync();
            roleName = (await Author.GetPrimaryRoleAsync()).Name;
            ShouldRenderValue = true;
            StateHasChanged();
            ShouldRenderValue = false;
        }
    }

    void IDisposable.Dispose()
    {
        Holder.RemoveRenderedMessage(this);
    }

    protected async Task OnPfpError()
    {
        pfpurl = "/icon-512.png";

        Console.WriteLine("pfp error caught");

        StateHasChanged();
    }

    /// <summary>
    /// This prevents the message from re-rendering. This should be expanded to support message edits in the future.
    /// </summary>
    protected override bool ShouldRender()
    {
        return ShouldRenderValue;
    }

}
