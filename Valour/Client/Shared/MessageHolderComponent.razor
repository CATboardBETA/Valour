<div id="innerwindow-@Window.Index" class="p-2 mt-auto" style="overflow-y: scroll;">
    @if (Messages != null && Messages.Count > 0)
    {
        currentRendered.Clear();

        ulong lastAuthorId = 0;

        foreach (ClientPlanetMessage msg in Messages)
        {
            string key = $"{Window.Index}-{Window.Channel.Id}-{msg.Message_Index}-{msg.TimeSent}";

            if (!currentRendered.Contains(key))
            {

                if (msg.Author_Id != lastAuthorId)
                {
                <MessageComponent Message="msg" @key='key'></MessageComponent>
                }
                else
                {
                <MultiMessageComponent Message="msg" @key='key'></MultiMessageComponent>
                }

                currentRendered.Add(key);
            }
            else
            {
                Console.WriteLine($"Prevented key collision for message [{key}]. This should not occur, but at least we handle it.");
            }

            lastAuthorId = msg.Author_Id;
        }
    }
</div>

@code {
    [Parameter]
    public ChatChannelWindow Window { get; set; } 

    [Parameter]
    public List<ClientPlanetMessage> Messages { get; set; }

    public HashSet<string> currentRendered = new HashSet<string>();

    public void ForceRefresh()
    {
        StateHasChanged();
    }

    //protected override async Task OnParametersSetAsync()
    //{

    //}

    protected override async Task OnInitializedAsync()
    {
        StateHasChanged();
    }

    protected override bool ShouldRender()
    {
        if (Messages == null)
        {
            return false;
        }

        if (Messages.Count == 0)
        {
            return true;
        }

        Console.WriteLine($"{Window.messageIndex} | {Window.messageIndexRendered}");

        if ((Window.messageIndex != Window.messageIndexRendered) || (Window.firstMessageIndex != Window.firstMessageIndexRendered))
        {
            Window.messageIndexRendered = Window.messageIndex;
            Window.firstMessageIndexRendered = Window.firstMessageIndex;
            return true;
        }

        return false;
    }
}