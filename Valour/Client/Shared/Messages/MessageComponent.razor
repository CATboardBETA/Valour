@inject ClientPlanetManager planetManager
@inject MemberContextMenu memberContextMenu
@inject IJSRuntime JS
@implements IDisposable

@if (Message == null)
{
    return;
}

<div id="m-@Message.Channel_Id-@Message.Message_Index" class="@Class" style="@Style">

    @if (Minimal)
    {
        <div class="time-container">
            <p class="time">
                @Message.TimeSent.ToLocalTime().ToShortTimeString().Replace(' ', '\0')
            </p>
        </div>
        <div class="message-content">
            <p class="content" @ref="InnerRef">
                @if (Message.Embed != null && Message.Embed.Pages.Length > 0)
                {
                    <EmbedComponent embed="@Message.Embed" Message="Message"></EmbedComponent>
                }
                else
                {
                    <MessageContentComponent @ref="ContentComponent" Message="Message"></MessageContentComponent>
                }
            </p>
        </div>

    }
    else
    {
        <div style="display:inline-block; position: absolute">
            <img class="author-pfp" src="@pfpurl" @onerror="OnPfpError" />
            <div class="time-container">
                <p class="time">
                    @Message.TimeSent.ToLocalTime().ToShortTimeString().Replace(' ', '\0')
                </p>
            </div>
        </div>
        <div class="message-content">
            @if (Author != null)
            {
                <p class="author-name" style="color: @roleColor;" id="@Author.Id,@Message.Channel_Id"
           @onmouseup="OnAuthorNameClick">
                    @name
                </p>

                <p class="role-name">
                    &nbsp;- @roleName
                </p>
            }
            else
            {
                <p class="author-name" style="color: @roleColor;">
                    User not found
                </p>
            }
            <p class="content" @ref="InnerRef">
                @if (Message.Embed != null && Message.Embed.Pages.Length > 0)
                {

                    Console.WriteLine(Message.Embed.Pages.Length);

                    <EmbedComponent embed="@Message.Embed" Message="Message"></EmbedComponent>
                }
                else
                {
                    <MessageContentComponent @ref="ContentComponent" Message="Message"></MessageContentComponent>
                }
            </p>
        </div>
    }
</div>

@code {
    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public ClientPlanetMessage Message { get; set; }

    [Parameter]
    public ClientPlanetMessage Last_Message { get; set; }

    [Parameter]
    public MessageHolderComponent Holder { get; set; }

    public MessageContentComponent ContentComponent;

    public ElementReference InnerRef;

    [Parameter]
    public string Key { get; set; }

    [Parameter]
    public bool Ghost { get; set; }

    public ClientPlanetMember Author;

    public bool ShouldRenderValue = false;

    public bool Minimal = false;

    public string Class
    {
        get
        {
            string _class = "";

            if (Minimal)
            {
                _class += "multi-message";
            }
            else
            {
                _class += "message";
            }

            if (mentioned)
            {
                _class += " mentioned";
            }

            return _class;
        }
    }

    public string Style
    {
        get
        {
            if (Ghost)
            {
                return "opacity: 0.8";
            }
            else
            {
                return "";
            }
        }
    }

    string roleColor = "#ffffff";

    string roleName = "Default";

    string pfpurl = "/icon-512.png";

    string name = "";

    bool mentioned = false;

    [Parameter]
    public bool Submessage { get; set; }

    private PlanetRole primaryRole;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("OnMessageLoad", InnerRef);
    }

    public async Task SetMessage(ClientPlanetMessage message)
    {
        this.Message = message;
        await BuildMessage();

        ReRender();
    }

    public async Task OnAuthorNameClick(MouseEventArgs e)
    {
        if (e.Button == 2)
        {
            await memberContextMenu.Open(e, Author);
        }
    }

    public async Task RefreshMessage()
    {
        await BuildMessage();
        StateHasChanged();
    }

    public void SetLast(ClientPlanetMessage msg)
    {
        Last_Message = msg;
    }

    public async Task BuildMessage()
    {
        if (Message == null)
        {
            return;
        }

        CheckMinimal();

        if (!Submessage)
        {
            var self_id = Holder.Window.Component.SelfMember.Id;

            if (Message.Mentions_Data != null)
            {
                mentioned = Message.Mentions_Data.Contains(self_id.ToString());
            }
        }

        if (Minimal){
            return;
        }

        Author = await Message.GetAuthorAsync();

        name = await Author.GetNameAsync();

        roleColor = await Author.GetColorHexAsync();

        primaryRole = await Author.GetPrimaryRoleAsync();

        roleName = primaryRole.Name;

        string pfp = await Author.GetPfpAsync();

        //Console.WriteLine(Submessage);
        //Console.WriteLine(Message.Mentions_Data);

        if (Author != null && !string.IsNullOrWhiteSpace(pfp))
        {
            pfpurl = pfp;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (!Submessage)
        {
            Holder.AddRenderedMessage(this);
        }

        ClientPlanetManager.Current.OnMemberUpdate += OnMemberUpdate;

        ClientPlanetManager.Current.OnRoleDeletion += OnRoleDeletion;

        ClientPlanetManager.Current.OnRoleUpdate += OnRoleUpdate;

        await BuildMessage();
    }

    public void CheckMinimal()
    {
        if (Last_Message != null && Message != null)
        {
            if (Last_Message.Author_Id == Message.Author_Id)
            {
                Minimal = true;
                return;
            }
        }
        
        Minimal = false;
    }

    public async Task UpdateForRoleChange()
    {
        roleColor = await Author.GetColorHexAsync();
        roleName = (await Author.GetPrimaryRoleAsync()).Name;
    }

    public void ReRender()
    {
        ShouldRenderValue = true;
        StateHasChanged();
        ContentComponent.ReRender();
        ShouldRenderValue = false;
    }

    public async Task OnRoleUpdate(PlanetRole role)
    {
        if (role.Id == primaryRole.Id)
        {
            primaryRole = role;
            await UpdateForRoleChange();
            ReRender();
        }
    }

    public async Task OnRoleDeletion(PlanetRole role)
    {
        if (role.Id == primaryRole.Id)
        {
            primaryRole = await Author.GetPrimaryRoleAsync();
            await UpdateForRoleChange();
            ReRender();
        }
    }

    public async Task OnMemberUpdate(ClientPlanetMember member)
    {
        if (member.Id == Author.Id)
        {
            Author = member;
            await UpdateForRoleChange();
            ReRender();
        }
    }

    void IDisposable.Dispose()
    {
        Holder.RemoveRenderedMessage(this);
    }

    protected async Task OnPfpError()
    {
        pfpurl = "/icon-512.png";

        Console.WriteLine("pfp error caught");

        StateHasChanged();
    }

    /// <summary>
    /// This prevents the message from re-rendering. This should be expanded to support message edits in the future.
    /// </summary>
    protected override bool ShouldRender()
    {
        return ShouldRenderValue;
    }

}
