@inject IJSRuntime JS

<div @key='"holder-" + Window.Index' id="innerwindow-@Window.Index" class="chat-holder mt-auto" style="overflow-y: scroll;">
    @if (Messages != null && Messages.Count > 0)
    {
        ulong lastAuthorId = 0;

        foreach (ClientPlanetMessage msg in Messages)
        {
            string key = $"{Window.Index}-{Window.Channel.Id}-{msg.Message_Index}-{msg.TimeSent}";

            if (msg.Author_Id != lastAuthorId)
            {
                <MessageComponent Message="msg" Key="@key" @key='msg' Holder="this" Submessage="false"></MessageComponent>
            }
            else
            {
                <MultiMessageComponent Message="msg" Key="@key" @key='key + "-multi"' Holder="this"></MultiMessageComponent>
            }

            lastAuthorId = msg.Author_Id;
        }
    }
</div>

@code {
    [Parameter]
    public ChatChannelWindow Window { get; set; }

    [Parameter]
    public List<ClientPlanetMessage> Messages { get; set; }

    public List<MessageComponent> RenderedMessages { get; set; }

    public string state = "none";

    //public HashSet<string> Keys = new HashSet<string>();

    public void Clear()
    {
        Messages.Clear();
    }

    public void AddMessages(List<ClientPlanetMessage> messages, bool refresh = true)
    {
        Messages.AddRange(messages);

        if (refresh)
        {
            StateHasChanged();
        }
    }

    public void InsertMessages(int position, List<ClientPlanetMessage> messages, bool refresh = true)
    {
        //foreach(var m in messages)
        //{
        //    Console.WriteLine(m.Content);
        //}

        Messages.InsertRange(position, messages);

        if (refresh)
        {
            StateHasChanged();
        }
    }

    public async Task AddMessage(ClientPlanetMessage message, bool refresh = true)
    {
        //Get current window scroll pos
        bool IsAtBottom = await JS.InvokeAsync<bool>("IsAtBottom", Window.Index);

        // check if theres too many messages
        if (IsAtBottom && Messages.Count > 120)
        {
            Messages.RemoveRange(0, Messages.Count - 120);
        }

        Messages.Add(message);

        // Flag for UI refresh
        if (refresh)
        {
            StateHasChanged();
        }

        await Window.Component.ScrollToBottom();
    }

    public void ForceRefresh()
    {
        StateHasChanged();
    }

    public void AddRenderedMessage(MessageComponent message)
    {
        RenderedMessages.Add(message);
    }

    public void RemoveRenderedMessage(MessageComponent message)
    {
        RenderedMessages.Remove(message);
    }

    //protected override async Task OnParametersSetAsync()
    //{

    //}

    protected override async Task OnInitializedAsync()
    {
        RenderedMessages = new List<MessageComponent>();
        Messages = new List<ClientPlanetMessage>();
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("Rendered messages");
        state = GetState();
    }

    public string GetState()
    {
        if (Messages == null || Messages.Count == 0)
        {
            return "none";
        }
        else
        {
            return $"{Messages.First().Message_Index}-{Messages.Last().Message_Index}";
        }
    }

    protected override bool ShouldRender()
    {
        return GetState() != state;
    }
}