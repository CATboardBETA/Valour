@implements IDisposable
@using Valour.Shared.Messages.Mentions

<div id="m-@Message.BaseMessage.Channel_Id-@Message.BaseMessage.Message_Index" class="@Class">
    
</div>

@code {
    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public ClientPlanetMessage Message { get; set; }

    private Member Author;

    [Parameter]
    public MessageHolderComponent Holder { get; set; }

    [Parameter]
    public string Key { get; set; }

    public MessageContentComponent component { get; set; }

    public string Class
    {
        get
        {
            if (mentioned)
            {
                return "multi-message mentioned";
            }
            else
            {
                return "multi-message";
            }
        }
    }


    bool mentioned = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var self_id = Holder.Window.Component.SelfMember.Id;

        if (Message.BaseMessage.Mentions != null && Message.BaseMessage.Mentions.Count > 0)
        {
            mentioned = Message.BaseMessage.Mentions.Any(x => x.Type == MentionType.Member && x.Target_Id == self_id);
        }
    }

    void IDisposable.Dispose()
    {

    }

    /// <summary>
    /// This prevents the message from re-rendering. This should be expanded to support message edits in the future.
    /// </summary>
    protected override bool ShouldRender()
    {
        return false;
    }
}

