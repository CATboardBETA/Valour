@inject ChannelListContextMenu channelListContextMenu
@inject ConfirmModal confirmModal
@inject InfoModal infoModal
@inject EditChannelListItemModal editModal
@inject HttpClient Http
@inject ClientPlanetManager planetManager

@if (visible)
{
    <div class="context-menu" id="@Modal_Id" style="left: @(x)px; top: @(y)px;">
        <div id="edit-channel-list-item-btn" class="context-menu-item" @onclick="EditChannelListItem">
            <p class="context-menu-item-text">
                Edit
            </p>
        </div>
        <div class="context-menu-item delete-context-menu-item" @onclick="DeleteChannelListItem">
            <p class="context-menu-item-text">
                Delete
            </p>
        </div>
    </div>
}

@code {

    public bool visible = false;

    public double x;
    public double y;

    const string Modal_Id = "channel-context-menu";

    [Parameter]
    public ModalHolderComponent Holder { get; set; }

    protected async override Task OnInitializedAsync()
    {
        channelListContextMenu.Component = this;
        ModalHolderComponent.CloseModalEvent += OnModalClose;
    }

    public void SetPosition(double x, double y)
    {
        this.x = x;
        this.y = y;
    }

    public void SetVisibility(bool value)
    {
        this.visible = value;
        StateHasChanged();
    }

    public async Task OnModalClose(string modal_id)
    {
        if (Modal_Id == modal_id)
        {
            SetVisibility(false);
        }
    }

    public async Task DeleteChannelListItem()
    {

        bool IsCategory = channelListContextMenu.SelectedItem.ItemType == ChannelListItemType.Category;

        if (IsCategory) {

            ulong category_id = channelListContextMenu.SelectedItem.Id;

            // get planet channels and categories

            List<ClientPlanetChatChannel> channels = await planetManager.GetCurrent().GetChannelsAsync();

            List<ClientPlanetCategory> categories = await planetManager.GetCurrent().GetCategoriesAsync();

            if (channels.Where(x => x.Parent_Id == category_id).Count() > 0 || categories.Where(x => x.Parent_Id == category_id).Count() > 0) {
                await infoModal.Open($"You can't delete this!",
                                    "This is due to this category having channels and/or categories inside of it.",
                                    "Okay",

                async () =>
                {
                    Console.WriteLine("User Clicked Ok");
                });

                return;
            }
        }

        
        

        await confirmModal.Open($"Delete {channelListContextMenu.SelectedItem.Name}?",
                                "Are you sure?",
                                "Continue",
                                "Cancel",

        async () =>
        {
            Console.WriteLine("Confirmed channel item deletion.");

            //Delete(ulong id, ulong user_id, string token)

            ulong user_id = ClientUserManager.User.Id;
            string token = ClientUserManager.UserSecretToken;
            string json = "";

            if (channelListContextMenu.SelectedItem.ItemType == ChannelListItemType.ChatChannel) {
                json = await Http.GetStringAsync($"Channel/Delete?id={channelListContextMenu.SelectedItem.Id}" +
                                                                    $"&user_id={user_id}" +
                                                                    $"&token={token}");
            }

            else {
                json = await Http.GetStringAsync($"Category/Delete?id={channelListContextMenu.SelectedItem.Id}" +
                                                                    $"&user_id={user_id}" +
                                                                    $"&token={token}");
            }

            TaskResult result = Newtonsoft.Json.JsonConvert.DeserializeObject<TaskResult>(json);

            Console.WriteLine(result.Message);

        },

        async () =>
        {
            Console.WriteLine("Cancelled channel item deletion.");
        });
    }

    public async Task EditChannelListItem()
    {
        await editModal.Open();
        await channelListContextMenu.Close();
    }
}

