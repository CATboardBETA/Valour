@inject ChannelListContextMenu channelListContextMenu
@inject HttpClient Http
@inject ClientWindowManager windowManager

@if (visible)
{
    <div class="context-menu" id="@Modal_Id" style="left: @(x)px; top: @(y)px;">
        <div id="edit-channel-list-item-btn" class="context-menu-item" @onclick="EditChannelListItem">
            <p class="context-menu-item-text">
                Edit
            </p>
        </div>
        <div class="context-menu-item delete-context-menu-item" @onclick="DeleteChannelListItem">
            <p class="context-menu-item-text">
                Delete
            </p>
        </div>
    </div>
}

@code {

    public bool visible = false;

    public double x;
    public double y;

    const string Modal_Id = "channel-context-menu";

    [Parameter]
    public ModalHolderComponent Holder { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    protected async override Task OnInitializedAsync()
    {
        channelListContextMenu.Component = this;
        ModalHolderComponent.CloseModalEvent += OnModalClose;
    }

    public void SetPosition(double x, double y)
    {
        this.x = x;
        this.y = y;
    }

    public void SetVisibility(bool value)
    {
        this.visible = value;
        StateHasChanged();
    }

    public async Task OnModalClose(string modal_id)
    {
        if (Modal_Id == modal_id)
        {
            SetVisibility(false);
        }
    }

    public async Task DeleteChannelListItem()
    {

        bool IsCategory = channelListContextMenu.SelectedItem.ItemType == ItemType.Category;

        if (IsCategory) {

            ulong category_id = channelListContextMenu.SelectedItem.Id;

            // get planet channels and categories

            List<Channel> channels = await windowManager.FocusedPlanet.GetChannelsAsync();

            List<Category> categories = await windowManager.FocusedPlanet.GetCategoriesAsync();

            if (channels.Where(x => x.Parent_Id == category_id).Count() > 0 || categories.Where(x => x.Parent_Id == category_id).Count() > 0) {

                InfoModalData imodalData = 
                new($"You can't delete this!",
                    "This is due to this category having channels and/or categories inside of it.",
                    "Okay",
                    async () =>
                    {
                        Console.WriteLine("User Clicked Ok");
                    }
                );

                ModalParameters imodParams = new();
                imodParams.Add("Data", imodalData);

                Modal.Show<InfoModalComponent>("Info", imodParams, new ModalOptions() { Class = "modal-shrink-fit" });
            }
        }


        ConfirmModalData modalData =
        new($"Delete {channelListContextMenu.SelectedItem.Name}?",
             "Are you sure?",
             "Continue",
             "Cancel", 
             async () =>
             {
                 Console.WriteLine("Confirmed channel item deletion.");
                 var result = await channelListContextMenu.SelectedItem.DeleteAsync();
                 Console.WriteLine("Deletion: " + result.Message);

             },
             async () =>
             {
                 Console.WriteLine("Cancelled channel item deletion.");
             }
        );

        ModalParameters modParams = new();
        modParams.Add("Data", modalData);

        Modal.Show<ConfirmModalComponent>("Confirm", modParams, new ModalOptions() { Class = "modal-shrink-fit" });
    }

    public async Task EditChannelListItem()
    {
        ModalParameters modParams = new();
        modParams.Add("ChannelListItem", channelListContextMenu.SelectedItem);

        Modal.Show<EditChannelListItemComponent>("Edit Channel Item", modParams);
        await channelListContextMenu.Close();
    }
}

