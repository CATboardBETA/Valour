@implements IDisposable
@inject MessageContextMenu messageContextMenu

<div id="m-@Message.Channel_Id-@Message.Message_Index" class="@Class" @onmouseup="opencontextmenu">
    <div class="time-container">
        <p class="time">
            @Message.TimeSent.ToLocalTime().ToShortTimeString().Replace(' ', '\0')
        </p>
    </div>
    <div class="message-content">
        <p class="content">
            <MessageContentComponent Message="Message"></MessageContentComponent>
        </p>
    </div>
</div>

@code {
    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public ClientPlanetMessage Message { get; set; }

    private ClientPlanetMember Author;

    [Parameter]
    public MessageHolderComponent Holder { get; set; }

    [Parameter]
    public string Key { get; set; }

    public MessageContentComponent component { get; set; }

    public string Class
    {
        get
        {
            if (mentioned)
            {
                return "multi-message mentioned";
            }
            else
            {
                return "multi-message";
            }
        }
    }

    public async Task opencontextmenu(MouseEventArgs e)
    {
        if (e.Button == 2)
        {
            await messageContextMenu.Open(e, Message);
        }
    }


    bool mentioned = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var self_id = Holder.Window.Component.SelfMember.Id;

        mentioned = Message.MemberMentions.Any(x => x.Member_Id == self_id);
    }

    void IDisposable.Dispose()
    {

    }

    /// <summary>
    /// This prevents the message from re-rendering. This should be expanded to support message edits in the future.
    /// </summary>
    protected override bool ShouldRender()
    {
        return false;
    }
}

