<style>
    /* The container - needed to position the dropdown content */
    .role-dropdown {
      position: relative;
    }

    /* Dropdown Content (Hidden by Default) */
    .dropdown-content {
      display: none;
      position: absolute;
      min-width: 160px;
      box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
      z-index: 1;
      top: 0px;
      left: 150px;
      background-color: var(--main-1);
    }

    /* Links inside the dropdown */
    .dropdown-content a {
      color: black;
      padding: 12px 16px;
      text-decoration: none;
      display: block;
    }

    /* Change color of dropdown links on hover */
    .dropdown-content a:hover {background-color: #f1f1f1}

    /* Show the dropdown menu on hover */
    .role-dropdown:hover .dropdown-content {
      display: block;
    }

    .dropdown-content::hover {
      display: block;
    }

    /* Change the background color of the dropdown button when the dropdown content is shown */
    .role-dropdown:hover .dropbtn {
      background-color: #192630;
    }

    .user-context-delete {
        color: #EF3A3A;
    }

    .user-context-delete:hover {
        color: white;
        background: #EF3A3A;
    }
</style>

<div class="context-menu UserContextMenu" id="" style="display:none;">
    <div class="context-menu-item user-context-delete" onclick="KickUser()">
        <p class="context-menu-item-text">
            Kick
        </p>
    </div>
    <div class="context-menu-item user-context-delete" onclick="BanUser()">
        <p class="context-menu-item-text">
            Ban
        </p>
    </div>
    @if (Planet != null)
    {
        <div class="context-menu-item role-dropdown">
            <p class="context-menu-item-text">
                Roles
            </p>
            <div class="dropdown-content">
                @foreach (PlanetRole role in Roles){
                    <div class="context-menu-item">
                        <p class="context-menu-item-text" style="color:@role.GetColorHex()">@role.Name</p>
                    </div>
                }
            </div>
            
        </div>
    }
</div>

@code {
    public ClientPlanet Planet { get; set; }
    public List<PlanetRole> Roles { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ClientPlanetManager.Current.OnPlanetChange += OnPlanetChange;
    }

    public async Task OnPlanetChange()
    {
        Planet = ClientPlanetManager.Current.GetCurrent();
        Roles = await Planet.GetRolesAsync();
        StateHasChanged();
    }
}

