@inject HttpClient Http
@inject NavigationManager navManager
@inject IJSRuntime JS
@inject ClientPlanetManager planetManager
@inject ClientWindowManager windowManager
@implements IDisposable

<div class="d-flex flex-column window" style="height:100%; max-width:100%;" id="window" @onclick="@OnClickWindow">

    <div class="channel-info">
        <h3 class="title">
            @Channel.Name
        </h3>
        @if (!string.IsNullOrWhiteSpace(Channel.Description))
        {
            <p class="description">
                @Channel.Description
            </p>
        }

        <div class="channel-buttons">
            <div class="channel-home" @onclick="ReturnHome">
                Home
            </div>
            @if (windowManager.GetWindowCount() > 1)
            {
                <div class="channel-close" @onclick="CloseWindow">
                    X
                </div>
            }
        </div>

    </div>

    <MessageHolderComponent @key='$"mh-{Window.Index}"' Window="Window" @ref="MessageHolder"></MessageHolderComponent>

    
    <div style="opacity: 0.7; width: 99%">
        <MessageComponent @ref="DummyComponent" Message="DummyMessage" Submessage ="true" ></MessageComponent>
    </div>

    <div class="textbox-holder ml-1" @onclick="ScrollToBottomAnim">

        <MentionSelectComponent @ref="MentionSelector"></MentionSelectComponent>

        <center>
            <div class="textbox" onclick="this.children[0].focus()">
                <div contenteditable="true" class="textbox-inner" id="text-input-@Window.Index" rows="1" autofocus>
                </div>
            </div>
        </center>
    </div>
</div>

@code {
    /// <summary>
    /// True if the client has negotiated a channel connection
    /// </summary>
    private bool channelConnected;

    /// <summary>
    /// The input currently within the chatbox, this is bound and any changes will
    /// be reflected within the box.
    /// </summary>
    private string currentInput;

    private bool mentionSelect;

    public MessageComponent DummyComponent { get; set; }

    public ClientPlanetMessage DummyMessage { get; set; }

    [Parameter]
    public ChatChannelWindow Window { get; set; }

    [Parameter]
    public Valour.Client.Pages.Index IndexPage { get; set; }

    [Parameter]
    public MainWindowComponent MainWindow { get; set; }

    public ClientPlanetChatChannel Channel;

    public ClientPlanet Planet;

    public ClientPlanetMember SelfMember;

    public Func<Task> ForceRefreshMessages;

    public bool ForceMessageRefresh;

    public MessageHolderComponent MessageHolder { get; set; }

    public MentionSelectComponent MentionSelector { get; set; }

    // Runs when page is initialized
    protected override async Task OnInitializedAsync()
    {
        Channel = Window.Channel;

        Planet = await Window.Channel.GetPlanetAsync();

        Window.Component = this;

        planetManager.OnMemberUpdate += OnPlanetMemberUpdate;
        planetManager.OnRoleUpdate += OnPlanetRoleUpdate;
        planetManager.OnChatChannelUpdate += OnChatChannelUpdate;

        await planetManager.OpenPlanetChatChannel(Window);

        SelfMember = await planetManager.GetPlanetMemberAsync(ClientUserManager.User.Id, Channel.Planet_Id);

        await JS.InvokeVoidAsync("OnChannelLoad", null);

        await JS.InvokeVoidAsync("SetupWindow", Window.Index);

        await JS.InvokeVoidAsync("SetSecretKey", ClientUserManager.UserSecretToken, ClientUserManager.User.Id, Planet.Id);

        await JS.InvokeVoidAsync("SetComponent", Window.Index, DotNetObjectReference.Create(this));

        await SetupNewChannelAsync();
    }

    void IDisposable.Dispose()
    {
        planetManager.OnMemberUpdate -= OnPlanetMemberUpdate;
        planetManager.OnRoleUpdate -= OnPlanetRoleUpdate;
        planetManager.OnChatChannelUpdate -= OnChatChannelUpdate;
    }

    public async Task OnChatChannelUpdate(ClientPlanetChatChannel channel)
    {
        if (Channel.Id == channel.Id)
        {
            this.Channel = channel;
            StateHasChanged();
        }
    }

    public async Task OnPlanetMemberUpdate(ClientPlanetMember member)
    {
        if (member.Planet_Id != Planet.Id)
        {
            return;
        }

        foreach (var msg in MessageHolder.RenderedMessages.Where(x => x.Author.User_Id == member.User_Id))
        {
            //Console.WriteLine(msg.Message.Message_Index);

            // Update member reference
            msg.Author = member;
            await msg.RefreshMessage();
        }
    }

    public async Task OnPlanetRoleUpdate(PlanetRole role)
    {
        if (role.Planet_Id != Planet.Id)
        {
            return;
        }

        foreach (var msg in MessageHolder.RenderedMessages.Where(x => x.Author.TryGetPrimaryRoleId() == role.Id))
        {
            await msg.RefreshMessage();
        }
    }

    public async Task CloseWindow()
    {
        windowManager.CloseWindow(Window.Index);
        await IndexPage.ForceRefresh();

        // This must be last (again)
        await planetManager.ClosePlanetChatChannel(Window, Channel);
    }

    public async Task ReturnHome()
    {
        HomeWindow newWindow = new HomeWindow(Window.Index);

        windowManager.SetWindow(Window.Index, newWindow);
        MainWindow.RefreshWindow(newWindow);

        // This must be last
        await planetManager.ClosePlanetChatChannel(Window, Channel);
    }

    public async Task SetupNewChannelAsync()
    {
        MessageHolder.Clear();

        MessageHolder.AddMessages(await Channel.GetLastMessagesAsync(64));
    }

    public async Task OnWindowChannelChange(ClientPlanetChatChannel newchannel)
    {
        var oldchannel = Window.Channel;

        Window.Channel = newchannel;
        Channel = newchannel;

        await planetManager.ReplacePlanetChatChannel(Window, oldchannel, newchannel);

        await SetupNewChannelAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await JS.InvokeVoidAsync("ScrollWindowBottom", Window.Index);
    }

    public async Task OnWindowClosed()
    {
        Console.WriteLine($"Gracefully exiting channel {Channel.Id} due to window change.");
        await planetManager.ClosePlanetChatChannel(Window, Channel);
    }

    public async Task OnRecieveMessage(ClientPlanetMessage message)
    {
        await MessageHolder.AddMessage(message);
    }

    public async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("ScrollWindowBottom", Window.Index);
    }

    public async Task ScrollToBottomAnim()
    {
        await JS.InvokeVoidAsync("ScrollWindowBottomAnim", Window.Index);
    }

    [JSInvokable]
    public async Task OnChatboxSubmit()
    {
        Console.WriteLine(currentInput);

        if (currentInput == null)
        {
            return;
        }

        string temp = currentInput.TrimEnd('\n');
        temp = temp.Trim();

        if (string.IsNullOrWhiteSpace(temp))
        {
            return;
        }

        if (temp != "")
        {
            currentInput = "";
            await OnChatboxUpdate(null, "");

            // Post message to server
            //StateHasChanged();
            await PostMessage(temp);

        }
    }

    public async Task UpdateMentionMenu(string text)
    {
        if (text.StartsWith('@'))
        {
            if (!MentionSelector.Visible)
            {
                MentionSelector.SetVisible(true);
            }

            await MentionSelector.SetText(text);
        }
        else
        {
            if (MentionSelector.Visible){
                MentionSelector.SetVisible(false);
            }
        }

        StateHasChanged();
    }

    [JSInvokable]
    public async Task OnCaretUpdate(string currentWord)
    {
        await UpdateMentionMenu(currentWord);
    }

    /// <summary>
    /// This runs every time a key is pressed when the chatbox is selected
    /// </summary>
    [JSInvokable]
    public async Task OnChatboxUpdate(string input, string currentWord)
    {
        await UpdateMentionMenu(currentWord);

        currentInput = input;

        // Console.WriteLine(input);

        if (string.IsNullOrWhiteSpace(input))
        {
            await DummyComponent.SetMessage(null);
        }
        else
        {
            DummyMessage = new ClientPlanetMessage()
            {
                Author_Id = SelfMember.User_Id,
                Content = input,
                Channel_Id = Channel.Id,
                Member_Id = SelfMember.Id,
                TimeSent = DateTime.UtcNow
            };

            await DummyComponent.SetMessage(DummyMessage);
        }

        StateHasChanged();
    }

    public async Task OnClickWindow()
    {
        ClientPlanet planet = await ClientPlanetManager.Current.GetPlanetAsync(Channel.Planet_Id);
        await planetManager.SetCurrentPlanet(planet);
    }

    public async Task PostMessage(string msg)
    {
        ClientPlanetMessage message = new ClientPlanetMessage()
        {
            Channel_Id = Channel.Id,
            Content = msg,
            TimeSent = DateTime.UtcNow,
            Author_Id = ClientUserManager.User.Id,
            Planet_Id = Channel.Planet_Id,
            Member_Id = SelfMember.Id
        };

        /*
        message.SetMentions(new List<Mention>()
        {
            new Mention()
            {
                Target_Id = 1050746125287424,
                Position = 5,
                Type = MentionType.Member
            }
        });
        */

        string json = Newtonsoft.Json.JsonConvert.SerializeObject(message);

        Console.WriteLine("SEND: \n" + json);

        HttpResponseMessage httpresponse = await Http.PostAsJsonAsync<PlanetMessage>($"Channel/PostMessage?token={ClientUserManager.UserSecretToken}", message);

        string res = await httpresponse.Content.ReadAsStringAsync();

        TaskResult response = Newtonsoft.Json.JsonConvert.DeserializeObject<TaskResult>(res);

        Console.WriteLine(response.ToString());
    }

    public async Task UpdateScrollPosition()
    {
        await JS.InvokeVoidAsync("UpdateScrollPosition", Window.Index);
    }

    public async Task ScaleScrollPosition()
    {
        await JS.InvokeVoidAsync("ScaleScrollPosition", Window.Index);
    }

    [JSInvokable("OnScrollTopInvoke")]
    public static async Task OnScrollTop(int index)
    {
        ChatChannelWindow Window = ClientWindowManager.Instance.GetWindow(index) as ChatChannelWindow;
        MessageHolderComponent Holder = Window.Component.MessageHolder;

        if (Window == null)
        {
            Console.WriteLine("Channel window is null in OnScrollTop!");
            return;
        }

        if (Holder.Messages == null || Holder.Messages.Count == 0)
        {
            return;
        }

        ulong firstIndex = Holder.Messages[0].Message_Index;

        Console.WriteLine($"Fetching older messages from index {firstIndex} for window {Window.Index}");

        var messages = await Window.Channel.GetMessagesAsync(firstIndex, 32);

        if (messages == null || messages.Count() == 0)
        {
            return;
        }

        await Window.Component.UpdateScrollPosition(); // This saves the scroll position

        Holder.InsertMessages(0, messages);

        //Window.Component.StateHasChanged();
        await Window.Component.ScaleScrollPosition(); // This ensures the page doesnt move harshly
    }
}
